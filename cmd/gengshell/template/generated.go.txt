// Code generated by gengshell DO NOT EDIT.
// versions:
//  gshell 0.0.1

package main

import (
	"context"
	"encoding/json"

    rpc "{{ .ModuleName }}"

	"github.com/j-tokumori/gshell"
)

// RegisterRPC ...
func RegisterRPC() gshell.Option {
	return gshell.RegisterRPCFactories(
{{ range $i, $data := .DataList }}        New{{$data.RPC}},
{{end}}
	)
}

{{ range $i, $data := .DataList }}
// {{$data.RPC}} ...
type {{$data.RPC}} rpc.{{$data.Args}}

// Call ...
func (r *{{$data.RPC}}) Call(ctx context.Context, conn gshell.Conn) (res *gshell.Response, err error) {
	client := rpc.New{{$data.ServiceClient}}(conn)
	args := rpc.{{$data.Args}}(*r)
	res = gshell.NewEmptyResponse()
	res.Reply, err = client.{{$data.RPC}}(ctx, &args, gshell.ResponseOptions(res)...)
	return res, err
}

// New{{$data.RPC}} ...
func New{{$data.RPC}}(in []byte) gshell.RPC {
	r := &{{$data.RPC}}{}
	err := json.Unmarshal(in, r)
	if err != nil {
		panic(err)
	}
	return r
}

// {{$data.RPC}}Reply ...
func {{$data.RPC}}Reply(c *gshell.Client) *rpc.{{$data.Reply}} {
	if res := c.Response("{{$data.RPC}}"); res != nil {
		return res.Reply.(*rpc.{{$data.Reply}})
	}
	return nil
}
{{end}}
