// Code generated by gengshell DO NOT EDIT.

package main

import (
	"context"
	"encoding/json"

	rpc "{{ .ModuleName }}"

	"github.com/j-tokumori/gshell"

	"google.golang.org/protobuf/types/known/emptypb"
)

type _ = emptypb.Empty

// RegisterRPC ...
func RegisterRPC() gshell.Option {
	return gshell.RegisterRPCFactories(
{{ range $i, $data := .DataList }}        New{{$data.ServiceName}}_{{$data.MethodName}},
{{end}}
	)
}

{{ range $i, $data := .DataList }}
// {{$data.ServiceName}}_{{$data.MethodName}} ...
type {{$data.ServiceName}}_{{$data.MethodName}} {{$data.OriginArgsType}}

// Call ...
func (r *{{$data.ServiceName}}_{{$data.MethodName}}) Call(ctx context.Context, conn gshell.Conn) (res *gshell.Response, err error) {
	client := rpc.New{{$data.ServiceName}}Client(conn)
	args := {{$data.OriginArgsType}}(*r)
	res = gshell.NewEmptyResponse()
	res.Reply, err = client.{{$data.MethodName}}(ctx, &args, gshell.ResponseOptions(res)...)
	return res, err
}

// New{{$data.ServiceName}}_{{$data.MethodName}} ...
func New{{$data.ServiceName}}_{{$data.MethodName}}(in []byte) gshell.RPC {
	r := &{{$data.ServiceName}}_{{$data.MethodName}}{}
	err := json.Unmarshal(in, r)
	if err != nil {
		panic(err)
	}
	return r
}

// Get{{$data.ServiceName}}_{{$data.MethodName}}Reply ...
func Get{{$data.ServiceName}}_{{$data.MethodName}}Reply(c *gshell.Client) *{{$data.OriginReplyType}} {
	if res := c.Response("{{$data.ServiceName}}.{{$data.MethodName}}"); res != nil {
		return res.Reply.(*{{$data.OriginReplyType}})
	}
	return nil
}
{{end}}
