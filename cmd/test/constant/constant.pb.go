// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0-devel
// 	protoc        v3.17.3
// source: constant/constant.proto

package constant

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ReceiptState型定義
type ReceiptState int32

const (
	// 初期化済み
	ReceiptState_ReceiptStatePrepared ReceiptState = 0
	// 処理中
	ReceiptState_ReceiptStateProcessing ReceiptState = 1
	// 成功
	ReceiptState_ReceiptStateSucceeded ReceiptState = 2
	// 失敗
	ReceiptState_ReceiptStateFailed ReceiptState = 3
	// エラー（要再送）
	ReceiptState_ReceiptStateError ReceiptState = 4
	// 総数
	ReceiptState_ReceiptStateNum ReceiptState = 5
)

// Enum value maps for ReceiptState.
var (
	ReceiptState_name = map[int32]string{
		0: "ReceiptStatePrepared",
		1: "ReceiptStateProcessing",
		2: "ReceiptStateSucceeded",
		3: "ReceiptStateFailed",
		4: "ReceiptStateError",
		5: "ReceiptStateNum",
	}
	ReceiptState_value = map[string]int32{
		"ReceiptStatePrepared":   0,
		"ReceiptStateProcessing": 1,
		"ReceiptStateSucceeded":  2,
		"ReceiptStateFailed":     3,
		"ReceiptStateError":      4,
		"ReceiptStateNum":        5,
	}
)

func (x ReceiptState) Enum() *ReceiptState {
	p := new(ReceiptState)
	*p = x
	return p
}

func (x ReceiptState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReceiptState) Descriptor() protoreflect.EnumDescriptor {
	return file_constant_constant_proto_enumTypes[0].Descriptor()
}

func (ReceiptState) Type() protoreflect.EnumType {
	return &file_constant_constant_proto_enumTypes[0]
}

func (x ReceiptState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReceiptState.Descriptor instead.
func (ReceiptState) EnumDescriptor() ([]byte, []int) {
	return file_constant_constant_proto_rawDescGZIP(), []int{0}
}

// PurchaseState型定義
// https://developers.google.com/android-publisher/api-ref/rest/v3/purchases.products purchaseState準拠
type PurchaseState int32

const (
	// 購入済み
	PurchaseState_PurchaseStateDone PurchaseState = 0
	// キャンセル済み
	PurchaseState_PurchaseStateCanceled PurchaseState = 1
	// 保留中
	PurchaseState_PurchaseStatePending PurchaseState = 2
)

// Enum value maps for PurchaseState.
var (
	PurchaseState_name = map[int32]string{
		0: "PurchaseStateDone",
		1: "PurchaseStateCanceled",
		2: "PurchaseStatePending",
	}
	PurchaseState_value = map[string]int32{
		"PurchaseStateDone":     0,
		"PurchaseStateCanceled": 1,
		"PurchaseStatePending":  2,
	}
)

func (x PurchaseState) Enum() *PurchaseState {
	p := new(PurchaseState)
	*p = x
	return p
}

func (x PurchaseState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PurchaseState) Descriptor() protoreflect.EnumDescriptor {
	return file_constant_constant_proto_enumTypes[1].Descriptor()
}

func (PurchaseState) Type() protoreflect.EnumType {
	return &file_constant_constant_proto_enumTypes[1]
}

func (x PurchaseState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PurchaseState.Descriptor instead.
func (PurchaseState) EnumDescriptor() ([]byte, []int) {
	return file_constant_constant_proto_rawDescGZIP(), []int{1}
}

// ReceiptErrorCode型定義
type ReceiptErrorCode int32

const (
	// なし
	ReceiptErrorCode_ReceiptErrorCodeNone ReceiptErrorCode = 0
	// 不明なエラー
	ReceiptErrorCode_ReceiptErrorCodeUnknown ReceiptErrorCode = 1
	// レシートが存在しない
	ReceiptErrorCode_ReceiptErrorCodeReceiptNotFound ReceiptErrorCode = 2
	// 与えられたレシートデータが処理済み(2度と検証できない)
	ReceiptErrorCode_ReceiptErrorCodeDuplicated ReceiptErrorCode = 3
	// タスクキューが異常
	ReceiptErrorCode_ReceiptErrorCodeTaskQueueError ReceiptErrorCode = 4
	// まだPrepareが実行されていないか、まだ済んでいない可能性がある
	ReceiptErrorCode_ReceiptErrorCodeNotPrepared ReceiptErrorCode = 5
	// JSON異常
	ReceiptErrorCode_ReceiptErrorCodeJSONError ReceiptErrorCode = 6
	// Prepareを実施したユーザーIDと使用したユーザーIDが異なる
	ReceiptErrorCode_ReceiptErrorCodeOwnerMissMatch ReceiptErrorCode = 7
	// product_idが不一致
	ReceiptErrorCode_ReceiptErrorCodeProductIDMissMatch ReceiptErrorCode = 8
	// Google シグネチャ検証エラー
	ReceiptErrorCode_ReceiptErrorCodeSignatureFail ReceiptErrorCode = 9
	// Google DeveloperPayload不一致
	ReceiptErrorCode_ReceiptErrorCodeDeveloperPayloadMissMatch ReceiptErrorCode = 10
	// レシートデータ異常
	ReceiptErrorCode_ReceiptErrorCodeReceiptDataFormatError ReceiptErrorCode = 11
	// レシート認証エラー
	ReceiptErrorCode_ReceiptErrorCodeReceiptFail ReceiptErrorCode = 12
	// Apple 現在利用できない
	ReceiptErrorCode_ReceiptErrorCodeServerCurrentlyUnabable ReceiptErrorCode = 13
	// Apple 環境間違い
	ReceiptErrorCode_ReceiptErrorCodeEnvironmentMissMatch ReceiptErrorCode = 14
	// Google 購入状態エラー
	ReceiptErrorCode_ReceiptErrorCodePurchaseStateError ReceiptErrorCode = 15
	// 総数
	ReceiptErrorCode_ReceiptErrorCodeNum ReceiptErrorCode = 16
)

// Enum value maps for ReceiptErrorCode.
var (
	ReceiptErrorCode_name = map[int32]string{
		0:  "ReceiptErrorCodeNone",
		1:  "ReceiptErrorCodeUnknown",
		2:  "ReceiptErrorCodeReceiptNotFound",
		3:  "ReceiptErrorCodeDuplicated",
		4:  "ReceiptErrorCodeTaskQueueError",
		5:  "ReceiptErrorCodeNotPrepared",
		6:  "ReceiptErrorCodeJSONError",
		7:  "ReceiptErrorCodeOwnerMissMatch",
		8:  "ReceiptErrorCodeProductIDMissMatch",
		9:  "ReceiptErrorCodeSignatureFail",
		10: "ReceiptErrorCodeDeveloperPayloadMissMatch",
		11: "ReceiptErrorCodeReceiptDataFormatError",
		12: "ReceiptErrorCodeReceiptFail",
		13: "ReceiptErrorCodeServerCurrentlyUnabable",
		14: "ReceiptErrorCodeEnvironmentMissMatch",
		15: "ReceiptErrorCodePurchaseStateError",
		16: "ReceiptErrorCodeNum",
	}
	ReceiptErrorCode_value = map[string]int32{
		"ReceiptErrorCodeNone":                      0,
		"ReceiptErrorCodeUnknown":                   1,
		"ReceiptErrorCodeReceiptNotFound":           2,
		"ReceiptErrorCodeDuplicated":                3,
		"ReceiptErrorCodeTaskQueueError":            4,
		"ReceiptErrorCodeNotPrepared":               5,
		"ReceiptErrorCodeJSONError":                 6,
		"ReceiptErrorCodeOwnerMissMatch":            7,
		"ReceiptErrorCodeProductIDMissMatch":        8,
		"ReceiptErrorCodeSignatureFail":             9,
		"ReceiptErrorCodeDeveloperPayloadMissMatch": 10,
		"ReceiptErrorCodeReceiptDataFormatError":    11,
		"ReceiptErrorCodeReceiptFail":               12,
		"ReceiptErrorCodeServerCurrentlyUnabable":   13,
		"ReceiptErrorCodeEnvironmentMissMatch":      14,
		"ReceiptErrorCodePurchaseStateError":        15,
		"ReceiptErrorCodeNum":                       16,
	}
)

func (x ReceiptErrorCode) Enum() *ReceiptErrorCode {
	p := new(ReceiptErrorCode)
	*p = x
	return p
}

func (x ReceiptErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReceiptErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_constant_constant_proto_enumTypes[2].Descriptor()
}

func (ReceiptErrorCode) Type() protoreflect.EnumType {
	return &file_constant_constant_proto_enumTypes[2]
}

func (x ReceiptErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReceiptErrorCode.Descriptor instead.
func (ReceiptErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_constant_constant_proto_rawDescGZIP(), []int{2}
}

// プロデューサーランク
type ProducerRank int32

const (
	// 定義なし
	ProducerRank_ProducerRankNone ProducerRank = 0
	// F
	ProducerRank_ProducerRankF ProducerRank = 1
	// E
	ProducerRank_ProducerRankE ProducerRank = 2
	// D
	ProducerRank_ProducerRankD ProducerRank = 3
	// C
	ProducerRank_ProducerRankC ProducerRank = 4
	// B
	ProducerRank_ProducerRankB ProducerRank = 5
	// A
	ProducerRank_ProducerRankA ProducerRank = 6
	// S
	ProducerRank_ProducerRankS ProducerRank = 7
	// SS
	ProducerRank_ProducerRankSS ProducerRank = 8
	// 総数
	ProducerRank_ProducerRankNum ProducerRank = 9
)

// Enum value maps for ProducerRank.
var (
	ProducerRank_name = map[int32]string{
		0: "ProducerRankNone",
		1: "ProducerRankF",
		2: "ProducerRankE",
		3: "ProducerRankD",
		4: "ProducerRankC",
		5: "ProducerRankB",
		6: "ProducerRankA",
		7: "ProducerRankS",
		8: "ProducerRankSS",
		9: "ProducerRankNum",
	}
	ProducerRank_value = map[string]int32{
		"ProducerRankNone": 0,
		"ProducerRankF":    1,
		"ProducerRankE":    2,
		"ProducerRankD":    3,
		"ProducerRankC":    4,
		"ProducerRankB":    5,
		"ProducerRankA":    6,
		"ProducerRankS":    7,
		"ProducerRankSS":   8,
		"ProducerRankNum":  9,
	}
)

func (x ProducerRank) Enum() *ProducerRank {
	p := new(ProducerRank)
	*p = x
	return p
}

func (x ProducerRank) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProducerRank) Descriptor() protoreflect.EnumDescriptor {
	return file_constant_constant_proto_enumTypes[3].Descriptor()
}

func (ProducerRank) Type() protoreflect.EnumType {
	return &file_constant_constant_proto_enumTypes[3]
}

func (x ProducerRank) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProducerRank.Descriptor instead.
func (ProducerRank) EnumDescriptor() ([]byte, []int) {
	return file_constant_constant_proto_rawDescGZIP(), []int{3}
}

// ID連携結果
type ConnectionResultType int32

const (
	// 失敗
	ConnectionResultType_ConnectionResultTypeFailure ConnectionResultType = 0
	// 成功
	ConnectionResultType_ConnectionResultTypeSuccess ConnectionResultType = 1
	// 課金キャンセル上限による連携権限がない
	ConnectionResultType_ConnectionResultTypeFailureNotPermittedOverCancelLimit ConnectionResultType = -4
	// 別ゲームアカウントと連携が既に行われている
	ConnectionResultType_ConnectionResultTypeFailureAlreadyExists ConnectionResultType = -3
	// 連携が既に行われている
	ConnectionResultType_ConnectionResultTypeFailureAlreadyConnected ConnectionResultType = -2
	// データを引き継ぐプロバイダが見つからない
	ConnectionResultType_ConnectionResultTypeFailureBNIDNotFound ConnectionResultType = -1
)

// Enum value maps for ConnectionResultType.
var (
	ConnectionResultType_name = map[int32]string{
		0:  "ConnectionResultTypeFailure",
		1:  "ConnectionResultTypeSuccess",
		-4: "ConnectionResultTypeFailureNotPermittedOverCancelLimit",
		-3: "ConnectionResultTypeFailureAlreadyExists",
		-2: "ConnectionResultTypeFailureAlreadyConnected",
		-1: "ConnectionResultTypeFailureBNIDNotFound",
	}
	ConnectionResultType_value = map[string]int32{
		"ConnectionResultTypeFailure":                            0,
		"ConnectionResultTypeSuccess":                            1,
		"ConnectionResultTypeFailureNotPermittedOverCancelLimit": -4,
		"ConnectionResultTypeFailureAlreadyExists":               -3,
		"ConnectionResultTypeFailureAlreadyConnected":            -2,
		"ConnectionResultTypeFailureBNIDNotFound":                -1,
	}
)

func (x ConnectionResultType) Enum() *ConnectionResultType {
	p := new(ConnectionResultType)
	*p = x
	return p
}

func (x ConnectionResultType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionResultType) Descriptor() protoreflect.EnumDescriptor {
	return file_constant_constant_proto_enumTypes[4].Descriptor()
}

func (ConnectionResultType) Type() protoreflect.EnumType {
	return &file_constant_constant_proto_enumTypes[4]
}

func (x ConnectionResultType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectionResultType.Descriptor instead.
func (ConnectionResultType) EnumDescriptor() ([]byte, []int) {
	return file_constant_constant_proto_rawDescGZIP(), []int{4}
}

// 引き継ぎ連携プロバイダ種別
type TransferProviderType int32

const (
	// 定義なし
	TransferProviderType_TransferProviderTypeNone TransferProviderType = 0
	// BNID
	TransferProviderType_TransferProviderTypeBNID TransferProviderType = 1
	// facebook
	TransferProviderType_TransferProviderTypeFB TransferProviderType = 2
	// sign in with apple
	TransferProviderType_TransferProviderTypeSIWA TransferProviderType = 3
	// 総数
	TransferProviderType_TransferProviderTypeNum TransferProviderType = 4
)

// Enum value maps for TransferProviderType.
var (
	TransferProviderType_name = map[int32]string{
		0: "TransferProviderTypeNone",
		1: "TransferProviderTypeBNID",
		2: "TransferProviderTypeFB",
		3: "TransferProviderTypeSIWA",
		4: "TransferProviderTypeNum",
	}
	TransferProviderType_value = map[string]int32{
		"TransferProviderTypeNone": 0,
		"TransferProviderTypeBNID": 1,
		"TransferProviderTypeFB":   2,
		"TransferProviderTypeSIWA": 3,
		"TransferProviderTypeNum":  4,
	}
)

func (x TransferProviderType) Enum() *TransferProviderType {
	p := new(TransferProviderType)
	*p = x
	return p
}

func (x TransferProviderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferProviderType) Descriptor() protoreflect.EnumDescriptor {
	return file_constant_constant_proto_enumTypes[5].Descriptor()
}

func (TransferProviderType) Type() protoreflect.EnumType {
	return &file_constant_constant_proto_enumTypes[5]
}

func (x TransferProviderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferProviderType.Descriptor instead.
func (TransferProviderType) EnumDescriptor() ([]byte, []int) {
	return file_constant_constant_proto_rawDescGZIP(), []int{5}
}

// 引き継ぎ連携情報の状態
type TransferProviderState int32

const (
	// 定義なし
	TransferProviderState_TransferProviderStateNone TransferProviderState = 0
	// 正常
	TransferProviderState_TransferProviderStateNormal TransferProviderState = 1
	// 連携確認
	TransferProviderState_TransferProviderStateConnectConfirm TransferProviderState = 2
	// 引き継ぎ確認
	TransferProviderState_TransferProviderStateTransferConfirm TransferProviderState = 3
	// 解除確認
	TransferProviderState_TransferProviderStateReleaseConfirm TransferProviderState = 4
	// 総数
	TransferProviderState_TransferProviderStateNum TransferProviderState = 5
)

// Enum value maps for TransferProviderState.
var (
	TransferProviderState_name = map[int32]string{
		0: "TransferProviderStateNone",
		1: "TransferProviderStateNormal",
		2: "TransferProviderStateConnectConfirm",
		3: "TransferProviderStateTransferConfirm",
		4: "TransferProviderStateReleaseConfirm",
		5: "TransferProviderStateNum",
	}
	TransferProviderState_value = map[string]int32{
		"TransferProviderStateNone":            0,
		"TransferProviderStateNormal":          1,
		"TransferProviderStateConnectConfirm":  2,
		"TransferProviderStateTransferConfirm": 3,
		"TransferProviderStateReleaseConfirm":  4,
		"TransferProviderStateNum":             5,
	}
)

func (x TransferProviderState) Enum() *TransferProviderState {
	p := new(TransferProviderState)
	*p = x
	return p
}

func (x TransferProviderState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferProviderState) Descriptor() protoreflect.EnumDescriptor {
	return file_constant_constant_proto_enumTypes[6].Descriptor()
}

func (TransferProviderState) Type() protoreflect.EnumType {
	return &file_constant_constant_proto_enumTypes[6]
}

func (x TransferProviderState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferProviderState.Descriptor instead.
func (TransferProviderState) EnumDescriptor() ([]byte, []int) {
	return file_constant_constant_proto_rawDescGZIP(), []int{6}
}

// 引き継ぎ認証タイプ
type TransferAuthenticationType int32

const (
	// 定義なし
	TransferAuthenticationType_TransferAuthenticationTypeNone TransferAuthenticationType = 0
	// webview連携
	TransferAuthenticationType_TransferAuthenticationTypeWebview TransferAuthenticationType = 1
	// SIWA(リダイレクトURL無し)
	TransferAuthenticationType_TransferAuthenticationTypeSIWA TransferAuthenticationType = 2
	// 総数
	TransferAuthenticationType_TransferAuthenticationTypeNum TransferAuthenticationType = 3
)

// Enum value maps for TransferAuthenticationType.
var (
	TransferAuthenticationType_name = map[int32]string{
		0: "TransferAuthenticationTypeNone",
		1: "TransferAuthenticationTypeWebview",
		2: "TransferAuthenticationTypeSIWA",
		3: "TransferAuthenticationTypeNum",
	}
	TransferAuthenticationType_value = map[string]int32{
		"TransferAuthenticationTypeNone":    0,
		"TransferAuthenticationTypeWebview": 1,
		"TransferAuthenticationTypeSIWA":    2,
		"TransferAuthenticationTypeNum":     3,
	}
)

func (x TransferAuthenticationType) Enum() *TransferAuthenticationType {
	p := new(TransferAuthenticationType)
	*p = x
	return p
}

func (x TransferAuthenticationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferAuthenticationType) Descriptor() protoreflect.EnumDescriptor {
	return file_constant_constant_proto_enumTypes[7].Descriptor()
}

func (TransferAuthenticationType) Type() protoreflect.EnumType {
	return &file_constant_constant_proto_enumTypes[7]
}

func (x TransferAuthenticationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferAuthenticationType.Descriptor instead.
func (TransferAuthenticationType) EnumDescriptor() ([]byte, []int) {
	return file_constant_constant_proto_rawDescGZIP(), []int{7}
}

// リダイレクトURLタイプ
type TransferRedirectURLType int32

const (
	// 定義なし
	TransferRedirectURLType_TransferRedirectURLTypeNone TransferRedirectURLType = 0
	// 連携
	TransferRedirectURLType_TransferRedirectURLTypeConnect TransferRedirectURLType = 1
	// 引継ぎ
	TransferRedirectURLType_TransferRedirectURLTypeTransfer TransferRedirectURLType = 2
	// 総数
	TransferRedirectURLType_TransferRedirectURLTypeNum TransferRedirectURLType = 3
)

// Enum value maps for TransferRedirectURLType.
var (
	TransferRedirectURLType_name = map[int32]string{
		0: "TransferRedirectURLTypeNone",
		1: "TransferRedirectURLTypeConnect",
		2: "TransferRedirectURLTypeTransfer",
		3: "TransferRedirectURLTypeNum",
	}
	TransferRedirectURLType_value = map[string]int32{
		"TransferRedirectURLTypeNone":     0,
		"TransferRedirectURLTypeConnect":  1,
		"TransferRedirectURLTypeTransfer": 2,
		"TransferRedirectURLTypeNum":      3,
	}
)

func (x TransferRedirectURLType) Enum() *TransferRedirectURLType {
	p := new(TransferRedirectURLType)
	*p = x
	return p
}

func (x TransferRedirectURLType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferRedirectURLType) Descriptor() protoreflect.EnumDescriptor {
	return file_constant_constant_proto_enumTypes[8].Descriptor()
}

func (TransferRedirectURLType) Type() protoreflect.EnumType {
	return &file_constant_constant_proto_enumTypes[8]
}

func (x TransferRedirectURLType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferRedirectURLType.Descriptor instead.
func (TransferRedirectURLType) EnumDescriptor() ([]byte, []int) {
	return file_constant_constant_proto_rawDescGZIP(), []int{8}
}

// バナー情報種別
type BannerType int32

const (
	// メインバナー
	BannerType_BannerTypeMain BannerType = 0
	// サブバナー
	BannerType_BannerTypeSub BannerType = 1
	// 総数
	BannerType_BannerTypeNum BannerType = 2
)

// Enum value maps for BannerType.
var (
	BannerType_name = map[int32]string{
		0: "BannerTypeMain",
		1: "BannerTypeSub",
		2: "BannerTypeNum",
	}
	BannerType_value = map[string]int32{
		"BannerTypeMain": 0,
		"BannerTypeSub":  1,
		"BannerTypeNum":  2,
	}
)

func (x BannerType) Enum() *BannerType {
	p := new(BannerType)
	*p = x
	return p
}

func (x BannerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BannerType) Descriptor() protoreflect.EnumDescriptor {
	return file_constant_constant_proto_enumTypes[9].Descriptor()
}

func (BannerType) Type() protoreflect.EnumType {
	return &file_constant_constant_proto_enumTypes[9]
}

func (x BannerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BannerType.Descriptor instead.
func (BannerType) EnumDescriptor() ([]byte, []int) {
	return file_constant_constant_proto_rawDescGZIP(), []int{9}
}

// アップロードファイル種別
type UploadFileType int32

const (
	// 定義なし
	UploadFileType_UploadFileTypeNone UploadFileType = 0
	// ガシャ
	UploadFileType_UploadFileTypeGasha UploadFileType = 1
	// イベント
	UploadFileType_UploadFileTypeEvent UploadFileType = 2
	// ポスター
	UploadFileType_UploadFileTypePoster UploadFileType = 3
	// エディタ
	UploadFileType_UploadFileTypeEditor UploadFileType = 4
	// タイトル
	UploadFileType_UploadFileTypeTitle UploadFileType = 5
	// 総数
	UploadFileType_UploadFileTypeNum UploadFileType = 6
)

// Enum value maps for UploadFileType.
var (
	UploadFileType_name = map[int32]string{
		0: "UploadFileTypeNone",
		1: "UploadFileTypeGasha",
		2: "UploadFileTypeEvent",
		3: "UploadFileTypePoster",
		4: "UploadFileTypeEditor",
		5: "UploadFileTypeTitle",
		6: "UploadFileTypeNum",
	}
	UploadFileType_value = map[string]int32{
		"UploadFileTypeNone":   0,
		"UploadFileTypeGasha":  1,
		"UploadFileTypeEvent":  2,
		"UploadFileTypePoster": 3,
		"UploadFileTypeEditor": 4,
		"UploadFileTypeTitle":  5,
		"UploadFileTypeNum":    6,
	}
)

func (x UploadFileType) Enum() *UploadFileType {
	p := new(UploadFileType)
	*p = x
	return p
}

func (x UploadFileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UploadFileType) Descriptor() protoreflect.EnumDescriptor {
	return file_constant_constant_proto_enumTypes[10].Descriptor()
}

func (UploadFileType) Type() protoreflect.EnumType {
	return &file_constant_constant_proto_enumTypes[10]
}

func (x UploadFileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UploadFileType.Descriptor instead.
func (UploadFileType) EnumDescriptor() ([]byte, []int) {
	return file_constant_constant_proto_rawDescGZIP(), []int{10}
}

// 貨幣種別
type CurrencyType int32

const (
	// 定義なし
	CurrencyType_CurrencyTypeNone CurrencyType = 0
	// ゲーム内通貨
	CurrencyType_CurrencyTypeInGameCurrency CurrencyType = 1
	// チケット
	CurrencyType_CurrencyTypeTicket CurrencyType = 2
	// 補填チケット
	CurrencyType_CurrencyTypeCompensationTicket CurrencyType = 3
	// 無料キャンペーン
	CurrencyType_CurrencyTypeFreeCampaign CurrencyType = 4
	// 総数
	CurrencyType_CurrencyTypeNum CurrencyType = 5
)

// Enum value maps for CurrencyType.
var (
	CurrencyType_name = map[int32]string{
		0: "CurrencyTypeNone",
		1: "CurrencyTypeInGameCurrency",
		2: "CurrencyTypeTicket",
		3: "CurrencyTypeCompensationTicket",
		4: "CurrencyTypeFreeCampaign",
		5: "CurrencyTypeNum",
	}
	CurrencyType_value = map[string]int32{
		"CurrencyTypeNone":               0,
		"CurrencyTypeInGameCurrency":     1,
		"CurrencyTypeTicket":             2,
		"CurrencyTypeCompensationTicket": 3,
		"CurrencyTypeFreeCampaign":       4,
		"CurrencyTypeNum":                5,
	}
)

func (x CurrencyType) Enum() *CurrencyType {
	p := new(CurrencyType)
	*p = x
	return p
}

func (x CurrencyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CurrencyType) Descriptor() protoreflect.EnumDescriptor {
	return file_constant_constant_proto_enumTypes[11].Descriptor()
}

func (CurrencyType) Type() protoreflect.EnumType {
	return &file_constant_constant_proto_enumTypes[11]
}

func (x CurrencyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CurrencyType.Descriptor instead.
func (CurrencyType) EnumDescriptor() ([]byte, []int) {
	return file_constant_constant_proto_rawDescGZIP(), []int{11}
}

var File_constant_constant_proto protoreflect.FileDescriptor

var file_constant_constant_proto_rawDesc = []byte{
	0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x2a, 0xa3, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x10, 0x00, 0x12, 0x1a,
	0x0a, 0x16, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x12, 0x15, 0x0a,
	0x11, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x10, 0x05, 0x2a, 0x5b, 0x0a, 0x0d, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x10,
	0x00, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x2a, 0xf5, 0x04, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x4e,
	0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x4e, 0x6f, 0x74,
	0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x4e,
	0x6f, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x4a, 0x53, 0x4f, 0x4e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x4d, 0x69, 0x73, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x07, 0x12,
	0x26, 0x0a, 0x22, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x4d, 0x69, 0x73, 0x73,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x08, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x09, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x69,
	0x73, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x0a, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x10, 0x0b, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x46, 0x61, 0x69, 0x6c, 0x10, 0x0c, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x55, 0x6e, 0x61, 0x62, 0x61, 0x62, 0x6c,
	0x65, 0x10, 0x0d, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x0e, 0x12, 0x26, 0x0a,
	0x22, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x10, 0x0f, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x10, 0x10, 0x2a, 0xd2,
	0x01, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x12,
	0x14, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x4e,
	0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x72, 0x52, 0x61, 0x6e, 0x6b, 0x46, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x45, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x10, 0x03, 0x12, 0x11,
	0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x10,
	0x04, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x61, 0x6e,
	0x6b, 0x42, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x52, 0x61, 0x6e, 0x6b, 0x41, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x53, 0x10, 0x08, 0x12, 0x13,
	0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x4e, 0x75,
	0x6d, 0x10, 0x09, 0x2a, 0xc4, 0x02, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x00, 0x12, 0x1f, 0x0a,
	0x1b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x43,
	0x0a, 0x36, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x4e, 0x6f, 0x74,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4f, 0x76, 0x65, 0x72, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x01, 0x12, 0x35, 0x0a, 0x28, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x10,
	0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x38, 0x0a, 0x2b, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x12, 0x34, 0x0a, 0x27, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x42, 0x4e, 0x49, 0x44, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x2a, 0xa9, 0x01, 0x0a, 0x14, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x6f, 0x6e, 0x65, 0x10,
	0x00, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x4e, 0x49, 0x44, 0x10, 0x01, 0x12,
	0x1a, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x46, 0x42, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x53, 0x49, 0x57, 0x41, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x4e, 0x75, 0x6d, 0x10, 0x04, 0x2a, 0xf1, 0x01, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x1d, 0x0a, 0x19, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12,
	0x1f, 0x0a, 0x1b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x01,
	0x12, 0x27, 0x0a, 0x23, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x10, 0x02, 0x12, 0x28, 0x0a, 0x24, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x10, 0x05, 0x2a, 0xae, 0x01, 0x0a, 0x1a, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x25, 0x0a,
	0x21, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x57, 0x65, 0x62, 0x76, 0x69,
	0x65, 0x77, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x53, 0x49, 0x57, 0x41, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x75, 0x6d, 0x10, 0x03, 0x2a, 0xa3, 0x01, 0x0a, 0x17,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x55, 0x52, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x52, 0x4c, 0x54, 0x79,
	0x70, 0x65, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x52, 0x4c, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x55, 0x52, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x10,
	0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x52, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x75, 0x6d, 0x10,
	0x03, 0x2a, 0x46, 0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x0e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x69,
	0x6e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x53, 0x75, 0x62, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x4e, 0x75, 0x6d, 0x10, 0x02, 0x2a, 0xbe, 0x01, 0x0a, 0x0e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x6f,
	0x6e, 0x65, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x47, 0x61, 0x73, 0x68, 0x61, 0x10, 0x01, 0x12, 0x17, 0x0a,
	0x13, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x10, 0x03,
	0x12, 0x18, 0x0a, 0x14, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x75, 0x6d, 0x10, 0x06, 0x2a, 0xb3, 0x01, 0x0a, 0x0c, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x6f, 0x6e, 0x65, 0x10,
	0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x10, 0x03, 0x12, 0x1c, 0x0a,
	0x18, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x46, 0x72, 0x65,
	0x65, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x75, 0x6d, 0x10, 0x05,
	0x42, 0x59, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e,
	0x61, 0x6d, 0x63, 0x6f, 0x42, 0x61, 0x6e, 0x64, 0x61, 0x69, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x73, 0x2f, 0x70, 0x72, 0x69, 0x73, 0x6d, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0xaa, 0x02, 0x25, 0x50, 0x52, 0x49, 0x53, 0x4d, 0x2e, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74,
	0x75, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_constant_constant_proto_rawDescOnce sync.Once
	file_constant_constant_proto_rawDescData = file_constant_constant_proto_rawDesc
)

func file_constant_constant_proto_rawDescGZIP() []byte {
	file_constant_constant_proto_rawDescOnce.Do(func() {
		file_constant_constant_proto_rawDescData = protoimpl.X.CompressGZIP(file_constant_constant_proto_rawDescData)
	})
	return file_constant_constant_proto_rawDescData
}

var file_constant_constant_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
var file_constant_constant_proto_goTypes = []interface{}{
	(ReceiptState)(0),               // 0: constant.ReceiptState
	(PurchaseState)(0),              // 1: constant.PurchaseState
	(ReceiptErrorCode)(0),           // 2: constant.ReceiptErrorCode
	(ProducerRank)(0),               // 3: constant.ProducerRank
	(ConnectionResultType)(0),       // 4: constant.ConnectionResultType
	(TransferProviderType)(0),       // 5: constant.TransferProviderType
	(TransferProviderState)(0),      // 6: constant.TransferProviderState
	(TransferAuthenticationType)(0), // 7: constant.TransferAuthenticationType
	(TransferRedirectURLType)(0),    // 8: constant.TransferRedirectURLType
	(BannerType)(0),                 // 9: constant.BannerType
	(UploadFileType)(0),             // 10: constant.UploadFileType
	(CurrencyType)(0),               // 11: constant.CurrencyType
}
var file_constant_constant_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_constant_constant_proto_init() }
func file_constant_constant_proto_init() {
	if File_constant_constant_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_constant_constant_proto_rawDesc,
			NumEnums:      12,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_constant_constant_proto_goTypes,
		DependencyIndexes: file_constant_constant_proto_depIdxs,
		EnumInfos:         file_constant_constant_proto_enumTypes,
	}.Build()
	File_constant_constant_proto = out.File
	file_constant_constant_proto_rawDesc = nil
	file_constant_constant_proto_goTypes = nil
	file_constant_constant_proto_depIdxs = nil
}
