// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0-devel
// 	protoc        v3.17.3
// source: status/user.proto

package status

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 自身のユーザー情報
type SelfStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ユーザーID
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// プレイヤー名
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 最終ログイン日時
	LastLoginDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_login_date,json=lastLoginDate,proto3" json:"last_login_date,omitempty"`
	// チュートリアルが完了しているか
	IsTutorialFinished bool `protobuf:"varint,4,opt,name=is_tutorial_finished,json=isTutorialFinished,proto3" json:"is_tutorial_finished,omitempty"`
	// 初ゲームプレイ日
	FirstTimeDate *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=first_time_date,json=firstTimeDate,proto3" json:"first_time_date,omitempty"`
	// WIP: 検索用ID
	SearchId string `protobuf:"bytes,6,opt,name=search_id,json=searchId,proto3" json:"search_id,omitempty"`
	// WIP: マネートークン
	Money int32 `protobuf:"varint,7,opt,name=money,proto3" json:"money,omitempty"`
	// WIP: マネートークン上限
	MaxMoney int32 `protobuf:"varint,8,opt,name=max_money,json=maxMoney,proto3" json:"max_money,omitempty"`
	// 現在のスタミナ
	Vitality int32 `protobuf:"varint,9,opt,name=vitality,proto3" json:"vitality,omitempty"`
	// 最大のスタミナ
	MaxVitality int32 `protobuf:"varint,10,opt,name=max_vitality,json=maxVitality,proto3" json:"max_vitality,omitempty"`
	// スタミナが全快する予定時刻
	FullRecoverDate *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=full_recover_date,json=fullRecoverDate,proto3" json:"full_recover_date,omitempty"`
	// 自動回復の間隔(秒)
	AutoRecoverInterval int32 `protobuf:"varint,12,opt,name=auto_recover_interval,json=autoRecoverInterval,proto3" json:"auto_recover_interval,omitempty"`
	// WIP: 現在のレベルでの獲得したプレイヤー経験値
	Exp int32 `protobuf:"varint,13,opt,name=exp,proto3" json:"exp,omitempty"`
	// WIP: 次のレベルの必要プレイヤー経験値
	NextExp int32 `protobuf:"varint,14,opt,name=next_exp,json=nextExp,proto3" json:"next_exp,omitempty"`
	// WIP: プレイヤーレベル
	Level int32 `protobuf:"varint,15,opt,name=level,proto3" json:"level,omitempty"`
	// WIP: 最大プレイヤーレベル
	MaxLevel int32 `protobuf:"varint,16,opt,name=max_level,json=maxLevel,proto3" json:"max_level,omitempty"`
	//// データ引き継ぎ連携情報
	//ConnectedProviderList []*TransferProviderStatus `protobuf:"bytes,17,rep,name=connected_provider_list,json=connectedProviderList,proto3" json:"connected_provider_list,omitempty"`
	// WIP: アセットタグ(接続先URL識別子)
	AssetTag string `protobuf:"bytes,18,opt,name=asset_tag,json=assetTag,proto3" json:"asset_tag,omitempty"`
}

func (x *SelfStatus) Reset() {
	*x = SelfStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelfStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelfStatus) ProtoMessage() {}

func (x *SelfStatus) ProtoReflect() protoreflect.Message {
	mi := &file_status_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelfStatus.ProtoReflect.Descriptor instead.
func (*SelfStatus) Descriptor() ([]byte, []int) {
	return file_status_user_proto_rawDescGZIP(), []int{0}
}

func (x *SelfStatus) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SelfStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SelfStatus) GetLastLoginDate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastLoginDate
	}
	return nil
}

func (x *SelfStatus) GetIsTutorialFinished() bool {
	if x != nil {
		return x.IsTutorialFinished
	}
	return false
}

func (x *SelfStatus) GetFirstTimeDate() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstTimeDate
	}
	return nil
}

func (x *SelfStatus) GetSearchId() string {
	if x != nil {
		return x.SearchId
	}
	return ""
}

func (x *SelfStatus) GetMoney() int32 {
	if x != nil {
		return x.Money
	}
	return 0
}

func (x *SelfStatus) GetMaxMoney() int32 {
	if x != nil {
		return x.MaxMoney
	}
	return 0
}

func (x *SelfStatus) GetVitality() int32 {
	if x != nil {
		return x.Vitality
	}
	return 0
}

func (x *SelfStatus) GetMaxVitality() int32 {
	if x != nil {
		return x.MaxVitality
	}
	return 0
}

func (x *SelfStatus) GetFullRecoverDate() *timestamppb.Timestamp {
	if x != nil {
		return x.FullRecoverDate
	}
	return nil
}

func (x *SelfStatus) GetAutoRecoverInterval() int32 {
	if x != nil {
		return x.AutoRecoverInterval
	}
	return 0
}

func (x *SelfStatus) GetExp() int32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *SelfStatus) GetNextExp() int32 {
	if x != nil {
		return x.NextExp
	}
	return 0
}

func (x *SelfStatus) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *SelfStatus) GetMaxLevel() int32 {
	if x != nil {
		return x.MaxLevel
	}
	return 0
}

//func (x *SelfStatus) GetConnectedProviderList() []*TransferProviderStatus {
//	if x != nil {
//		return x.ConnectedProviderList
//	}
//	return nil
//}

func (x *SelfStatus) GetAssetTag() string {
	if x != nil {
		return x.AssetTag
	}
	return ""
}

// プロフィール
type ProfileStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ユーザーID
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// プレイヤー名
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 検索用ID
	//
	// Deprecated: Do not use.
	SearchId string `protobuf:"bytes,3,opt,name=search_id,json=searchId,proto3" json:"search_id,omitempty"`
	// レベル
	Level int32 `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	// コメント
	Comment string `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`
	// お気に入りキャラクターID
	FavoriteCharacterId string `protobuf:"bytes,6,opt,name=favorite_character_id,json=favoriteCharacterId,proto3" json:"favorite_character_id,omitempty"`
	// サポートキャラクターID
	SupportCharacterId string `protobuf:"bytes,7,opt,name=support_character_id,json=supportCharacterId,proto3" json:"support_character_id,omitempty"`
	// 最終ログイン日時（フレンドリストのみ使用）
	LastLoginDate *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=last_login_date,json=lastLoginDate,proto3" json:"last_login_date,omitempty"`
}

func (x *ProfileStatus) Reset() {
	*x = ProfileStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileStatus) ProtoMessage() {}

func (x *ProfileStatus) ProtoReflect() protoreflect.Message {
	mi := &file_status_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileStatus.ProtoReflect.Descriptor instead.
func (*ProfileStatus) Descriptor() ([]byte, []int) {
	return file_status_user_proto_rawDescGZIP(), []int{1}
}

func (x *ProfileStatus) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ProfileStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Deprecated: Do not use.
func (x *ProfileStatus) GetSearchId() string {
	if x != nil {
		return x.SearchId
	}
	return ""
}

func (x *ProfileStatus) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ProfileStatus) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *ProfileStatus) GetFavoriteCharacterId() string {
	if x != nil {
		return x.FavoriteCharacterId
	}
	return ""
}

func (x *ProfileStatus) GetSupportCharacterId() string {
	if x != nil {
		return x.SupportCharacterId
	}
	return ""
}

func (x *ProfileStatus) GetLastLoginDate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastLoginDate
	}
	return nil
}

// スタミナ変化
type ResultVitalityStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 変化前のスタミナ
	BeforeVitality int32 `protobuf:"varint,1,opt,name=before_vitality,json=beforeVitality,proto3" json:"before_vitality,omitempty"`
	// 変化後のスタミナ
	AfterVitality int32 `protobuf:"varint,2,opt,name=after_vitality,json=afterVitality,proto3" json:"after_vitality,omitempty"`
	// スタミナが全開する予定時刻
	FullRecoverDate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=full_recover_date,json=fullRecoverDate,proto3" json:"full_recover_date,omitempty"`
}

func (x *ResultVitalityStatus) Reset() {
	*x = ResultVitalityStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_user_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultVitalityStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultVitalityStatus) ProtoMessage() {}

func (x *ResultVitalityStatus) ProtoReflect() protoreflect.Message {
	mi := &file_status_user_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultVitalityStatus.ProtoReflect.Descriptor instead.
func (*ResultVitalityStatus) Descriptor() ([]byte, []int) {
	return file_status_user_proto_rawDescGZIP(), []int{2}
}

func (x *ResultVitalityStatus) GetBeforeVitality() int32 {
	if x != nil {
		return x.BeforeVitality
	}
	return 0
}

func (x *ResultVitalityStatus) GetAfterVitality() int32 {
	if x != nil {
		return x.AfterVitality
	}
	return 0
}

func (x *ResultVitalityStatus) GetFullRecoverDate() *timestamppb.Timestamp {
	if x != nil {
		return x.FullRecoverDate
	}
	return nil
}

// 記録された時刻
type RecordTimeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 種別
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// 時刻
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *RecordTimeStatus) Reset() {
	*x = RecordTimeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_user_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordTimeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordTimeStatus) ProtoMessage() {}

func (x *RecordTimeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_status_user_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordTimeStatus.ProtoReflect.Descriptor instead.
func (*RecordTimeStatus) Descriptor() ([]byte, []int) {
	return file_status_user_proto_rawDescGZIP(), []int{3}
}

func (x *RecordTimeStatus) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *RecordTimeStatus) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

var File_status_user_proto protoreflect.FileDescriptor

var file_status_user_proto_rawDesc = []byte{
	0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x15, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xd3, 0x05, 0x0a, 0x0a, 0x53, 0x65, 0x6c, 0x66, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x42, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x69, 0x73, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6d, 0x61, 0x78, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x69, 0x74,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x76, 0x69, 0x74,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x69, 0x74,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78,
	0x56, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x11, 0x66, 0x75, 0x6c, 0x6c,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0f, 0x66, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x32, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x13, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x65,
	0x78, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x45, 0x78,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x56, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x61, 0x67, 0x22, 0xb7, 0x02, 0x0a, 0x0d, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x08, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x66, 0x61, 0x76,
	0x6f, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a,
	0x14, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x42, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x69,
	0x74, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x76, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x56, 0x69, 0x74,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x76,
	0x69, 0x74, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x56, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x11,
	0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0f, 0x66, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x65, 0x22, 0x56, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x55, 0x5a, 0x2d,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x61, 0x6d, 0x63, 0x6f,
	0x42, 0x61, 0x6e, 0x64, 0x61, 0x69, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x73, 0x2f, 0x70, 0x72,
	0x69, 0x73, 0x6d, 0x2f, 0x70, 0x62, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0xaa, 0x02, 0x23,
	0x50, 0x52, 0x49, 0x53, 0x4d, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74, 0x75, 0x62, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_status_user_proto_rawDescOnce sync.Once
	file_status_user_proto_rawDescData = file_status_user_proto_rawDesc
)

func file_status_user_proto_rawDescGZIP() []byte {
	file_status_user_proto_rawDescOnce.Do(func() {
		file_status_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_status_user_proto_rawDescData)
	})
	return file_status_user_proto_rawDescData
}

var file_status_user_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_status_user_proto_goTypes = []interface{}{
	(*SelfStatus)(nil),             // 0: status.SelfStatus
	(*ProfileStatus)(nil),          // 1: status.ProfileStatus
	(*ResultVitalityStatus)(nil),   // 2: status.ResultVitalityStatus
	(*RecordTimeStatus)(nil),       // 3: status.RecordTimeStatus
	(*timestamppb.Timestamp)(nil),  // 4: google.protobuf.Timestamp
	//(*TransferProviderStatus)(nil), // 5: status.TransferProviderStatus
}
var file_status_user_proto_depIdxs = []int32{
	4, // 0: status.SelfStatus.last_login_date:type_name -> google.protobuf.Timestamp
	4, // 1: status.SelfStatus.first_time_date:type_name -> google.protobuf.Timestamp
	4, // 2: status.SelfStatus.full_recover_date:type_name -> google.protobuf.Timestamp
	5, // 3: status.SelfStatus.connected_provider_list:type_name -> status.TransferProviderStatus
	4, // 4: status.ProfileStatus.last_login_date:type_name -> google.protobuf.Timestamp
	4, // 5: status.ResultVitalityStatus.full_recover_date:type_name -> google.protobuf.Timestamp
	4, // 6: status.RecordTimeStatus.time:type_name -> google.protobuf.Timestamp
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_status_user_proto_init() }
func file_status_user_proto_init() {
	if File_status_user_proto != nil {
		return
	}
	//file_status_transfer_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_status_user_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelfStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_user_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_user_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultVitalityStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_user_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordTimeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_status_user_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_status_user_proto_goTypes,
		DependencyIndexes: file_status_user_proto_depIdxs,
		MessageInfos:      file_status_user_proto_msgTypes,
	}.Build()
	File_status_user_proto = out.File
	file_status_user_proto_rawDesc = nil
	file_status_user_proto_goTypes = nil
	file_status_user_proto_depIdxs = nil
}
