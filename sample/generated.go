// Code generated by gengshell DO NOT EDIT.

package main

import (
	"context"
	"encoding/json"

	rpc "github.com/j-tokumori/gshell/sample/service"

	"github.com/j-tokumori/gshell"

	"google.golang.org/protobuf/types/known/emptypb"
)

type _ = emptypb.Empty

// RegisterRPC ...
func RegisterRPC() gshell.Option {
	return gshell.RegisterRPCFactories(
		NewAuthService_CreateUser,
		NewAuthService_Login,
	)
}

// AuthService_CreateUser ...
type AuthService_CreateUser emptypb.Empty

// Call ...
func (r *AuthService_CreateUser) Call(ctx context.Context, conn gshell.Conn) (res *gshell.Response, err error) {
	client := rpc.NewAuthServiceClient(conn)
	args := emptypb.Empty(*r)
	res = gshell.NewEmptyResponse()
	res.Reply, err = client.CreateUser(ctx, &args, gshell.ResponseOptions(res)...)
	return res, err
}

// NewAuthService_CreateUser ...
func NewAuthService_CreateUser(in []byte) gshell.RPC {
	r := &AuthService_CreateUser{}
	err := json.Unmarshal(in, r)
	if err != nil {
		panic(err)
	}
	return r
}

// GetAuthService_CreateUserReply ...
func GetAuthService_CreateUserReply(c *gshell.Client) *rpc.AuthCreateUserReply {
	if res := c.Response("AuthService_CreateUser"); res != nil {
		return res.Reply.(*rpc.AuthCreateUserReply)
	}
	return nil
}

// AuthService_Login ...
type AuthService_Login rpc.AuthLoginArgs

// Call ...
func (r *AuthService_Login) Call(ctx context.Context, conn gshell.Conn) (res *gshell.Response, err error) {
	client := rpc.NewAuthServiceClient(conn)
	args := rpc.AuthLoginArgs(*r)
	res = gshell.NewEmptyResponse()
	res.Reply, err = client.Login(ctx, &args, gshell.ResponseOptions(res)...)
	return res, err
}

// NewAuthService_Login ...
func NewAuthService_Login(in []byte) gshell.RPC {
	r := &AuthService_Login{}
	err := json.Unmarshal(in, r)
	if err != nil {
		panic(err)
	}
	return r
}

// GetAuthService_LoginReply ...
func GetAuthService_LoginReply(c *gshell.Client) *rpc.AuthLoginReply {
	if res := c.Response("AuthService_Login"); res != nil {
		return res.Reply.(*rpc.AuthLoginReply)
	}
	return nil
}
