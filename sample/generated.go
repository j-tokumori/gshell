// Code generated by gengshell DO NOT EDIT.

package main

import (
	"context"
	"encoding/json"

	rpc "github.com/j-tokumori/gshell/sample/grpc"

	"github.com/j-tokumori/gshell"

	"google.golang.org/protobuf/types/known/emptypb"
)

type _ = emptypb.Empty

// RegisterRPC ...
func RegisterRPC() gshell.Option {
	return gshell.RegisterRPCFactories(
		NewSampleService_Hello,
	)
}

// SampleService_Hello ...
type SampleService_Hello rpc.HelloRequest

// Call ...
func (r *SampleService_Hello) Call(ctx context.Context, conn gshell.Conn) (res *gshell.Response, err error) {
	client := rpc.NewSampleServiceClient(conn)
	args := rpc.HelloRequest(*r)
	res = gshell.NewEmptyResponse()
	res.Reply, err = client.Hello(ctx, &args, gshell.ResponseOptions(res)...)
	return res, err
}

// NewSampleService_Hello ...
func NewSampleService_Hello(in []byte) gshell.RPC {
	r := &SampleService_Hello{}
	err := json.Unmarshal(in, r)
	if err != nil {
		panic(err)
	}
	return r
}

// GetSampleService_HelloReply ...
func GetSampleService_HelloReply(c *gshell.Client) *rpc.HelloResponse {
	if res := c.Response("SampleService.Hello"); res != nil {
		return res.Reply.(*rpc.HelloResponse)
	}
	return nil
}
